eclipse生成的*.keystore签名文件获取SHA1

1.进入文件所在的目录。
cd
2.执行命令：
keytool -list -keystore eclipse.keystore

3.终端打印如下
skyinno, Aug 8, 2018, PrivateKeyEntry, 
证书指纹 (SHA1): BA:CB:F4:14:16:A3:1B:D1:2A:FA:56:22:AD:1C:02:68:7A:5B:49:E2



android studio 生成的*.jks签名文件获取SHA1

1.进入文件所在的目录。
cd
2.执行命令：
keytool -v -list -keystore keystore.jks
输入密码

3.终端打印如下

密钥库类型: jks
密钥库提供方: SUN

您的密钥库包含 1 个条目

别名: skyinno
创建日期: Jul 24, 2016
条目类型: PrivateKeyEntry
证书链长度: 1
证书[1]:
所有者: CN=skyinno, OU=skyinno, O=skyinno
发布者: CN=skyinno, OU=skyinno, O=skyinno
序列号: 21adb133
有效期为 Sun Jul 24 23:47:45 CST 2016 至 Sat Jun 24 23:47:45 CST 2141
证书指纹:
	 MD5:  74:10:40:0B:FA:F3:9D:52:52:0D:D8:D4:BD:0B:4E:03
	 SHA1: 6C:C5:E1:6D:EB:73:08:0A:A2:0D:06:48:12:0A:5E:15:B2:6A:70:AB
	 SHA256: 17:EA:FC:0E:03:94:C6:DE:CD:09:52:90:AB:B5:CA:00:A2:C2:0D:87:15:68:DD:6E:D4:11:0D:99:9B:53:52:A8
签名算法名称: SHA256withRSA
主体公共密钥算法: 2048 位 RSA 密钥
版本: 3





以下为扩展:

Android jks文件签名转换keystore文件签名


本人比较lower一直使用doc命令，生成签名文件，一直使用keystore，最近遇到一个同行用的jks，但是现在很多大平台提供的加固包也就是加壳包，都需要keystore，研究了下，实现jks文件转换为keystore文件需求。
1.了解keystore
标准keystore（standard jdk keystore types)包括：
JCEKS，JKS，PKCS12这几种格式，主要区别就是jceks可是用来存储对称密钥（分组密钥、私密密钥），而jks就只能存储非对称密钥对（私钥+x509公钥证书），pkcs12是通用格式（rsa公司标准）微软和java都支持。这里就产生了一个问题：使用java的keytool产生的keystore如何在微软的系统下使用（如何导入到ie中），解决方法就是先将jks的keystore变成pkcs12格式的keystore。其实jdk中存在一个keystore class，提供了抽象的通用对keystore操作的类，基于这个接口，实现了以下这个可是在两种格式之间互导的程序[该1解释摘自他人博客]
2.jks—>keystore本质
仔细阅读了keystore的相关，也就是jks—>keystore文件本质，就是把jks文件的加密信息导出成为PKCS12的类型文件，再把这个信息，导入到keystore文件中
3.jks—>keystore需要提供支持
1)jdk环境:更具上面的内容我们会发现，我们需要依赖jdk环境，顾需要进行一系列的操作一定要有jdk环境
2)需要提供JKS到PKCS12转换的方法
3)需要提供PKCS12内容导入||生成keystore文件的方法

4.具体实现


根据上面的分析，我们就要一步一步的进行实现上面分析的操作
1)首先JDK环境

2)生成jks文件

3)jsk转换为PKCS12类型p12文件方法

keytool -importkeystore -srckeystore keystore.jks -srcstoretype JKS -deststoretype PKCS12 -destkeystore keystore.p12

4)PKCS12—>keystore文件

keytool -v -importkeystore -srckeystore keystore.p12 -srcstoretype PKCS12 -destkeystore keystore.keystore -deststoretype JKS




KEYSTORE转JKS

//keystore--->crt
keytool -export -alias test -file D:\test.crt -keystore D:\test.keystore
//CRT-->CER
openssl x509 -inform pem -in test.crt -outform der -out test.cer
//CER--->JKS
keytool -import -v -alias test -file test.cer -keystore test.jks -storepass 123456 -noprompt 

