1.检测Docker Engine, Docker Compose, 和Docker Machine的版本
docker version
docker-compose --version
docker-machine --version

2.运行官网提供的二个简单列子

//hello world 例子

拉取hello-world镜像
docker pull hello-world

查看hello-world镜像信息：
docker images hello-world

根据镜像生成对应容器
docker run hello-world

ps不加参数只会把当前运行的Community打印出来，查看当前所有的Community，加上-a参数。
docker ps -a

当然也可以根据镜像生成一个具体名称的镜像，先删除当前容器
docker rm miaozhihao

当然如果当前容器正在运行，要删除这个容器，则使用命令
docker rm -f miaozhihao

使用镜像生成具体名称的容器：
docker run --name miaozhihao hello-world


//web服务 nginx 例子

拉取nginx镜像
docker pull nginx

查看nginx镜像信息：
docker images nginx

启动docker的web服务 nginx
docker run -d -p 80:80 --name webserver nginx
-p参数是使用宿主机的80映射容器的80端口

交互式终端方式进入 webserver容器
docker exec -it webserver bash

修改nginx的显示页面：
echo '<h1>Hello, Docker!</h1>' > /usr/share/nginx/html/index.html
exit

修改了容器的文件，也就是改动了容器的存储层。我们可以通过 docker diff
docker diff webserver

使用docker commit生成镜像
docker commit --author "zhihao.miao <1026145686@qq.com>" --message "修改了默认网页" webserver nginx:v2
--autho 指定作者 --message表示容器的一些信息

查看当前nginx镜像：
docker images nginx

查看当前所有的容器，包括运行的和停止的
docker ps -a

启动新的容器
docker run --name newwebserver -d -p 80:80 nginx:v2

浏览器访问
localhost:80






一些docker命令总结

docker images :查看当前宿主机的所有镜像。
docker images ubuntu：根据仓库名列出镜像
docker images ubuntu:14.04:指定仓库名和标签
docker build -t webservice .:表示使用当前目录下的DockerFile来生成镜像，-t参数的值表示镜像的tagname，如果DockerFile在当前路径下则使用.，如果不在当前路径下则使用相对路径。
docker ps -a: 没有-a参数表示显示当前宿主机的正在运行的容器，加上-a表示显示当前宿主机所有的容器，包括已经退出的容器。
docker run -d -p 2222:22 --name base centos:7.1
表示根据指定的镜像后台运行容器，容器的名字是base（--name就是指定容器的名字)，centos:7.1表示镜像的名字，-p参数表示当前宿主机的2222端口对应容器的22端口。
-d参数表示（Run container in background and print container ID）
docker exec -it base /bin/bash
以交互式命令进入base容器并且执行/bin/bash命令
docker rmi webservice:删除webservice镜像 如果带标签  docker rmi webservice:v2
docker rm base: 删除base容器，如果base正在运行，则可以使用docker rm -f base进行强行删除





Docker 三个基本概念

镜像（Image）
Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。


容器（Container）
镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。
容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 命名空间。因此容器可以拥有自己的 root文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。


仓库（Repository）
镜像构建完成后，可以很容易的在当前宿主上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry 就是这样的服务。
一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。
通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 <仓库名>:<标签>的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest作为默认标签。





